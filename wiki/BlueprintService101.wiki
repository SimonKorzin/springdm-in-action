#summary Tutorial for Spring DM Blueprint Reference Implementation

= Introduction =

The [http://www.osgi.org OSGi] Blueprint Service aims at instantiating, configuring and assembling the inner components of an OSGi bundle. It also allows interacting with the OSGi service registry (register/consume services) in a declarative way.

The Blueprint Service (a.k.a RFC-124) has been introduced in the 4.2 version of the OSGi specifiation and is a standardization of [http://www.springsource.org/osgi/ Spring DM]. So, think of the Blueprint Service as a component model for the inner assembling of OSGi bundles and a tool to publish/consume OSGi services in a reliable way, without having to use the OSGi API at all.

This page is a tutorial to introduce the Reference Implementation of the Blueprint Service, Spring DM 2.0. You'll learn how to associate a Blueprint Container to an OSGi bundle. This container will contain a simple bean, which will be registered declaratively on the service registry.

Prerequisites:
  * basic understanding of OSGi
  * Maven 2 installed

= Creating the bundle =

In a working directory, create a Maven 2 project with the following command:

{{{
mvn archetype:generate
}}}

You'll be prompted for several choices:
  * archetype to use: choose the default (15, a basic Maven 2 project), just type {{{Enter}}}
  * the group of the project: {{{com.manning.sdmia}}}
  * the artifact id: {{{blueprint101}}}
  * the defaut package: default, just type {{{Enter}}}
  * the version: default, just type {{{Enter}}}
  * confirmation: type {{{Enter}}}

This creates a {{{blueprint101}}} directory, where lies a standard Maven 2 project. In the {{{src/main/java/com/manning/sdmia}}}, create a {{{BlueprintBean}}} class with the following content:

{{{
package com.manning.sdmia;

public class BlueprintBean {

  public BlueprintBean() {
    System.out.println("Blueprint Bean created!");
  }
	
}
}}}

It's now time to create the descriptor of the bundle's Blueprint container. This descriptor is a XML file and must be in the {{{OSGI-INF/blueprint}}} directory of the bundle. Create the {{{src/main/resources/OSGI-INF/blueprint}}} directory and a create a {{{bundle-context.xml}}} file in it. Here is the content of the descriptor:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0 
    http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

  <!-- create the bean -->
  <bean id="blueprintBean" class="com.manning.sdmia.BlueprintBean" />      	
   	
  <!-- export the bean on the service registry -->
  <service ref="blueprintBean" interface="com.manning.sdmia.BlueprintBean" />   	
   	
</blueprint>
}}}

The next step is to package the project as an OSGi bundle.

= Packaging the bundle =

We'll use the [http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html Apache Felix Bundle Plugin] for packaging our Maven 2 project as an OSGi bundle. Here are the steps to do so:
  * change the packaging of the bundle from {{{jar}}} to {{{bundle}}}
  * add a plugin configuration entry in the {{{build}}} element of the POM file.

Here is how the {{{pom.xml}}} should look like once modified to use the Felix Bundle Plugin:

{{{
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
    http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.manning.sdmia</groupId>
  <artifactId>blueprint101</artifactId>
  <packaging>bundle</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>blueprint101</name>
	
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.0.0</version>
        <extensions>true</extensions>
      </plugin>
    </plugins>
  </build>
	
</project>
}}}